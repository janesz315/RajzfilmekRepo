--
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.1.22.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 2023.05.04. 14:58:40
-- Server version: 5.5.5-10.4.24-MariaDB
-- Client version: 4.1
--

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set SQL mode
-- 
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

DROP DATABASE IF EXISTS cartoons;

CREATE DATABASE IF NOT EXISTS cartoons
	CHARACTER SET utf8
	COLLATE utf8_hungarian_ci;

--
-- Set default database
--
USE cartoons;

DELIMITER $$

--
-- Create function `RandomDate2`
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS RandomDate2(date_from DATE, date_to DATE)
  RETURNS date
BEGIN 
  DECLARE result DATETIME;
  SET result = ( SELECT
    FROM_UNIXTIME(
    UNIX_TIMESTAMP(date_from) + FLOOR(
    RAND() * (
    UNIX_TIMESTAMP(date_to) - UNIX_TIMESTAMP(date_from) + 1
    )
    )
    ));
  RETURN DATE(result);
END
$$

--
-- Create function `randomInt`
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS randomInt(min int, max int)
  RETURNS int(11)
BEGIN
set @rand = FLOOR( RAND() * (max-min + 1) + min);
RETURN @rand;
END
$$

--
-- Create function `randomName`
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS randomName()
  RETURNS varchar(255) CHARSET utf8 COLLATE utf8_hungarian_ci
BEGIN
set @name = ELT(randomInt(1,33),
'Aaahh!!! Real Monsters',
'Adventure Time',
'Jimmy Neutron',
'Pityke',
'Alvin and the Chipmunks ',
'The Amazing World of Gumball',
'The Legend of Korra',
'Baby Looney Tunes',
'Ben 10',
'Penguins of Madagascar',
'Danny Phantom',
'Gravity Falls',
'Kenny the Shark',
'Little Einsteins',
'Mickey Mouse Clubhouse',
'My Life as a Teenage Robot',
'Pet Alien',
'The Simpsons',
'SpongeBob SquarePants',
'Steven Universe',
'Super Robot Monkey Team Hyperforce Go!',
'The Fairly OddParents',
'Catdogs',
'Rugrats',
'Bunsen is a beast',
'The Loud House',
'The Casagrandes',
'Miraculous',
'Bubble Guppies',
'Team Umizoomi',
'Ni Hao, Kai-Lan',
'Go Diego, Go!',
'Dora the Explorer'
);

RETURN @name;
END
$$

DELIMITER ;

--
-- Create table `creators`
--
CREATE TABLE IF NOT EXISTS creators (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 14,
AVG_ROW_LENGTH = 1365,
CHARACTER SET utf8,
COLLATE utf8_hungarian_ci;

--
-- Create table `countries`
--
CREATE TABLE IF NOT EXISTS countries (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 14,
AVG_ROW_LENGTH = 1365,
CHARACTER SET utf8,
COLLATE utf8_hungarian_ci;

--
-- Create table `cartoons`
--
CREATE TABLE IF NOT EXISTS cartoons (
  id INT(11) NOT NULL AUTO_INCREMENT,
  name VARCHAR(50) NOT NULL,
  numberOfSeasons INT(11) DEFAULT NULL,
  numberOfEpisodes INT(11) DEFAULT NULL,
  countriesId INT(11) NOT NULL,
  creatorsId INT(11) NOT NULL,
  runningTime INT(11) DEFAULT NULL,
  AiringStart DATE DEFAULT NULL,
  AiringEnd DATE DEFAULT NULL,
  PRIMARY KEY (id)
)
ENGINE = INNODB,
AUTO_INCREMENT = 23,
AVG_ROW_LENGTH = 819,
CHARACTER SET utf8,
COLLATE utf8_hungarian_ci;

--
-- Create foreign key
--
ALTER TABLE cartoons 
  ADD CONSTRAINT FK_cartoons_countries_id FOREIGN KEY (countriesId)
    REFERENCES countries(id);

--
-- Create foreign key
--
ALTER TABLE cartoons 
  ADD CONSTRAINT FK_cartoons_creators_id FOREIGN KEY (creatorsId)
    REFERENCES creators(id);

DELIMITER $$

--
-- Create procedure `genStat`
--
CREATE DEFINER = 'root'@'localhost'
PROCEDURE genStat(db int)
BEGIN
DELETE
  FROM cartoons;
DELETE
  FROM countries;
DELETE
  FROM creators;


INSERT countries (id, name)
  VALUES (1, 'United States'), (2, 'Canada'), (3, 'France'), (4, 'Germany'), (5, 'Netherlands'), (6, 'Hungary'), (7, 'Argentina'), (8, 'Russia'), (9, 'Japan'), (10, 'South Korea'), (11, 'Spain'), (12, 'China');

INSERT creators (id, name)
  VALUES (1, 'Butch Hartman'), (2, 'Stephen Hillenburg'), (3, 'Chris Savino'), (4, 'Gabor Csupo'), (5, 'John Trabbic III'), (6, 'Janice Karman'), (7, 'Pendleton Ward'), (8, 'J. G. Quintel'), (9, 'Ben Bocquelet'), (10, 'Ian Whybrow'), (11, 'Van Partible'), (12, 'Genndy Tartakovsky');

SET @a = 0;
      simple_loop: LOOP
         SET @a=@a+1;

#INSERT tanulo (id, nev, osztId)
#VALUES (@a, randNev(), randInt(1, 12));
INSERT cartoons (id, name, numberOfSeasons, numberOfEpisodes, countriesId, creatorsId, runningTime, AiringStart, AiringEnd)
  VALUES (@a, randomName(), randomInt(1, 25), randomInt(1, 500), randomInt(1, 12), randomInt(1, 12), randomInt(15, 90), RandomDate2('1980-01-01', '1999-12-31'), RandomDate2('2000-1-1', '2023-12-31'));

         IF @a>=db THEN
            LEAVE simple_loop;
         END IF;
   END LOOP simple_loop;

SELECT
  *
FROM cartoons;
SELECT
  *
FROM countries;
SELECT
  *
FROM creators;

END
$$

--
-- Create function `randomDate`
--
CREATE DEFINER = 'root'@'localhost'
FUNCTION IF NOT EXISTS randomDate()
  RETURNS date
BEGIN
SET @MIN = '1962-01-01';
SET @MAX = '2023-04-30';
set @date = TIMESTAMPADD(SECOND, FLOOR(RAND() * TIMESTAMPDIFF(SECOND, @MIN, @MAX)), @MIN);

RETURN @date;
END
$$

DELIMITER ;

-- 
-- Dumping data for table creators
--
INSERT INTO creators VALUES
(1, 'Butch Hartman'),
(2, 'Stephen Hillenburg'),
(3, 'Chris Savino'),
(4, 'Gabor Csupo'),
(5, 'John Trabbic III'),
(6, 'Janice Karman'),
(7, 'Pendleton Ward'),
(8, 'J. G. Quintel'),
(9, 'Ben Bocquelet'),
(10, 'Ian Whybrow'),
(11, 'Van Partible'),
(12, 'Genndy Tartakovsky');

-- 
-- Dumping data for table countries
--
INSERT INTO countries VALUES
(1, 'United States'),
(2, 'Canada'),
(3, 'France'),
(4, 'Germany'),
(5, 'Netherlands'),
(6, 'Hungary'),
(7, 'Argentina'),
(8, 'Russia'),
(9, 'Japan'),
(10, 'South Korea'),
(11, 'Spain'),
(12, 'China');

-- 
-- Dumping data for table cartoons
--
INSERT INTO cartoons VALUES
(1, 'Kenny the Shark', 3, 206, 9, 6, 23, '1983-08-24', '2013-06-11'),
(2, 'Ben 10', 15, 93, 2, 3, 69, '1997-10-20', '2006-11-06'),
(3, 'Bunsen is a beast', 24, 175, 12, 10, 31, '1991-07-05', '2005-11-04'),
(4, 'Pet Alien', 19, 75, 7, 6, 45, '1994-06-24', '2010-02-08'),
(5, 'Ni Hao, Kai-Lan', 11, 113, 11, 11, 56, '1983-11-21', '2007-09-06'),
(6, 'Aaahh!!! Real Monsters', 4, 284, 6, 8, 72, '1997-11-02', '2004-07-05'),
(7, 'Ben 10', 19, 494, 9, 5, 83, '1987-07-18', '2004-02-14'),
(8, 'Rugrats', 4, 211, 9, 6, 89, '1992-01-03', '2001-02-22'),
(9, 'Mickey Mouse Clubhouse', 2, 455, 5, 5, 51, '1987-07-13', '2010-06-11'),
(10, 'Adventure Time', 24, 246, 9, 12, 57, '1980-09-03', '2011-11-16'),
(11, 'Kenny the Shark', 10, 391, 10, 6, 21, '1980-01-21', '2018-03-01'),
(12, 'The Loud House', 16, 362, 10, 10, 47, '1997-06-13', '2001-11-04'),
(13, 'The Loud House', 16, 356, 10, 8, 80, '1988-07-21', '2013-06-20'),
(14, 'The Simpsons', 24, 44, 8, 12, 80, '1988-06-26', '2012-12-29'),
(15, 'Mickey Mouse Clubhouse', 14, 220, 7, 6, 56, '1988-08-17', '2012-01-31'),
(16, 'Baby Looney Tunes', 16, 183, 1, 11, 57, '1981-08-30', '2017-04-21'),
(17, 'Gravity Falls', 16, 5, 3, 12, 36, '1989-07-04', '2012-10-22'),
(18, 'Baby Looney Tunes', 16, 163, 10, 12, 57, '1996-06-19', '2010-09-26'),
(19, 'The Loud House', 13, 78, 4, 1, 36, '1986-04-18', '2017-03-30'),
(20, 'The Fairly OddParents', 3, 241, 2, 4, 22, '1991-06-16', '2013-06-22');

-- 
-- Restore previous SQL mode
-- 
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;